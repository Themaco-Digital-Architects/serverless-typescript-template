# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: "2010-09-09"
Description: >-

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs12.x
    Tracing: Active
    MemorySize: 128
    Layers:
      - Ref: NodeModuleLayer
    Timeout: 6
    Environment:
      Variables:
        STAGE:
          Ref: LambdaStage
        REGION: "eu-west-1"
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    PermissionsBoundary:
      Fn::Sub: "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary"

Parameters:
  AppId:
    Type: String
  LambdaStage:
    Type: String
    Default: Prod
  APIStage:
    Type: String
    Default: v1

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function to send email
  # TODO : replace environment variable
  # TODO : create a deadqueue letter
  # TODO : replace a no-reply by a support address
  sendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.sendEmailHandler
      CodeUri: ./dist/
      Description: Function able to send an email with xxx as emitter
      Policies:
        - AWSXrayWriteOnlyAccess
        - SESCrudPolicy:
            IdentityName: "xxx@themaco.fr"
      Environment:
        Variables:
          REPLY_TO_EMAIL: "xxx@themaco.fr"
          SOURCE_EMAIL: "xxx@themaco.fr"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /send-email
            Method: POST
            Auth:
              ApiKeyRequired: true
            RestApiId:
              Ref: ApiGatewayApi

  reportFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.reportHandler
      CodeUri: ./dist/
      Description: Function able to send a notification to a specified topic
      Policies:
        - AWSXrayWriteOnlyAccess
        - SNSPublishMessagePolicy:
            TopicName: "*"
      Environment:
        Variables:
          CONTACT_TOPIC: "arn:aws:sns:xxx:xxx:contact"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /report
            Method: POST
            Auth:
              ApiKeyRequired: true
            RestApiId:
              Ref: ApiGatewayApi

  testFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: |
        exports.handler = async function(event) {
          console.log("Everything is ...?");
          return {
            statusCode: 200,
            headers: {},
            body: JSON.stringify("Everything is awesome!"),
            isBase64Encoded: false
          };
        }
      Description: Function used to test API directly
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
                - ThemacoUserPool
                - Arn
            AuthType: "COGNITO_USER_POOLS"
      StageName:
        Ref: APIStage
      Cors:
        AllowMethods: "'POST, GET, OPTIONS, DELETE'"
        AllowHeaders: "'Accept, Content-Type, Referer, User-Agent, X-Api-Key'"
        AllowOrigin: "'*'"
      # ADD GatewayResponses https://github.com/awslabs/serverless-application-model/pull/841/files
      Domain:
        BasePath: /
        CertificateArn: "arn:aws:acm:xxx:xxx:certificate/xxx"
        DomainName: xxx
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: xxx

  BackendUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId:
        Ref: WebsiteAPIKey
      KeyType: API_KEY
      UsagePlanId:
        Ref: BackendUsagePlan

  WebsiteAPIKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: "Key used by themaco.fr website -> public"
      Enabled: true
      StageKeys:
        - RestApiId:
            Ref: ApiGatewayApi
          StageName:
            Ref: APIStage

  BackendUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages:
        - ApiId:
            Ref: ApiGatewayApi
          Stage:
            Ref: APIStage
      Description: Principle usage plan for website (and other public) usage of backend API
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100

  ThemacoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: "xxx@themaco.fr"
        ReplyToEmailAddress: "xxx@themaco.fr"
        SourceArn: "arn:aws:ses:eu-west-1:xxx:identity/xxx@themaco.fr"
      UserPoolName: "Themaco User Pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - "https://www.xxx.fr/solutions/welcome"
      ClientName: "API Themaco Client"
      LogoutURLs:
        - "https://www.xxx.fr/solutions/welcome"
      SupportedIdentityProviders:
        - COGNITO
        - Google
      UserPoolId:
        Ref: ThemacoUserPool

  # The DNS record linking to Alias cloudfront has to be done manually
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      CustomDomainConfig:
        CertificateArn: "arn:aws:acm:xxx:xxx:certificate/xxx"
      Domain: auth.themaco.fr
      UserPoolId:
        Ref: ThemacoUserPool

  # Sortir les cl√©s du template
  CognitoIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId:
        Ref: ThemacoUserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: "xxx.apps.googleusercontent.com"
        client_secret: "xxx"
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"

  NodeModuleLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layers/.
      CompatibleRuntimes:
        - nodejs12.x
      Description: "Layer dedicated to host node_module of backend application"
#Add outputs
